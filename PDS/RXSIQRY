RXSIQRY   TITLE 'Query PPRC Status with ANTRQST'
*--------------------------------------------------------------------*
* Program Name  : RXSIQRY
*
* Language      : Assembler
* Attributes    : RENT REUS REFR AC(0)
* AMODE         : 31
* RMODE         : ANY
*
*--------------------------------------------------------------------*
* Program Function
*
* External REXX function to query PPRC volumes.
*
* Invocation
*
*    rcode = rxsiqry(DevN)
*
*  Returns:
*    SIMPLEX   DevN is SIMPLEX
*    DUPLEX    DevN is part of a DUPLEX pair
*    PENDING   DevN is PENDING
*    SUSPEND   DevN is SUSPENDed
*    ERROR     ANTRQRST or parameter error
*
*  Problems:
*    Contact Alfred Nykolyn  apn@istar.ca
*
*--------------------------------------------------------------------*
*
*  ANTRQST PQUERY Data Area (See ANTP025I for layout)
*
PqueryD  dsect
PdevN    ds   cl4                 * Device Number
         ds   cl1
PLevel   ds   cl9                 * Level  (PRIMARY/SECONDARY)
         ds   cl1
PState   ds   cl10                * Pair State
*  Pair states are: SIMPLEX, DUPLEX, COPYING, SUSPENDED
*
         ds   cl1
PathStat ds   cl8                 * Path Status (ACTIVE/INACTIVE)
         ds   cl1
PrSSID   ds   cl4                 * Primarry SSID
         ds   cl1
PrCCA    ds   cl2                 * Primary CCA
         ds   cl1
PSerial  ds   cl12                * Primary Serial #
         ds   cl1
SSSID    ds   cl4                 * Secondary SSID
         ds   cl1
SCCA     ds   cl2                 * Secondary CCA
         ds   cl1
SSerial  ds   cl12                * Secondary Serial #
Pqueryln equ  *-PqueryD

rxsiqury csect
rxsiqury amode 31
rxsiqury rmode any
         save  (14,12)
         lr    r12,r15
         using rxsiqury,r12

         lr    r2,r1
         using efpl,r2            * addr REXX func parms

         la    r0,$antrqdln
         getmain RU,lv=(0),loc=ANY

         st    r1,forward(,r13)
         st    r13,backward(,r1)
         lr    r13,r1
         using antrqd,r13

         l     r3,efpleval        * addr of pointer to eval block
         l     r3,0(,r3)          * REXX eval block addr
         using evalblock,r3

         l     r4,efplarg         * REXX arg list
         using argtable_entry,r4  * address arg table

         la    r0,l'error         * Assume the worst
         st    r0,evalblock_evlen
         mvc   evalblock_evdata(l'error),error
         icm   r5,b'1111',argtable_argstring_ptr
         bnp   badparm            * No args

         icm   r6,b'1111',argtable_argstring_length
         bnp   badparm            * No args

         la    r0,4
         cr    r6,r0
         bh    badparm            * Max length 4

         la    r0,3
         cr    r6,r0
         bl    badparm            * Min length 3

         mvc   parms,0(r5)        * Save parms
         tr    parms,trtab        * Translate a-fA-F to  x'FA...FF'
         lr    r10,r6
         la    r9,parms

check_hex    equ  *
         cli   0(r9),x'00'
         be    badparm
         la    r9,1(,r9)
         bct   r10,check_hex

         ex    r6,packit          * pack devc(3),parms(*-*)
         drop  r2,r4
*
*  Build ANTRQST Parameters
*
         la    r0,l'qryinfo
         sth   r0,qrylen
*
*  Issue ANTRQST QUERY
*
         antrqst ilk=PPRC,                                             +
               request=PQUERY,                                         +
               devn=devc,                                              +
               qrysize=qrylen,                                         +
               qryinfo=qryinfo,                                        +
               retinfo=qretinfo,                                       +
               mf=(E,antqpl)

         ltr   r15,r15            * ANTRQST parm error?
         bnz   antrq_parmerr

         l     r15,rtc
         l     r0,rsn
         c     r15,qryok          * query field large enough?
         bne   antrq_error

         la    r11,qryinfo
         using PqueryD,r11

         mvc   evalblock_evdata(l'Pstate),Pstate
         la    r10,l'Pstate
         la    r9,Pstate
         la    r8,Pstate
         mvi   Pstate+l'Pstate,c' '    * End mark

find_blank     equ *
         cli   0(r9),c' '         * Scan for 1st blank
         be    found_blank
         la    r9,1(,r9)
         bct   r10,find_blank

found_blank    equ  *
         sr    r9,r8              * State length
         clc   Pstate(l'suspend),suspend
         bne   *+4+4
         la    r9,l'suspend
         st    r9,evalblock_evlen

done     equ   *
         la    r0,$antrqdln
         lr    r11,r13
         l     r13,backward(,r13)
         freemain RU,lv=(0),a=(r11)

         return (14,12),rc=0
         drop   r11
*
*   Errors
*
badparm  equ  *
         wto   mf=(E,badpmsg)

         b     done
*
*  ANTRQST Parameter Error
*
antrq_parmerr  equ  *
         cvd   r15,wa             * R15 = rc
         mvc   wtos(msg1ln),msg1
         mvc   wtos+$i1(l'edmaskt),edmaskt
         mvc   wtos+$i2(l'edmaskt),edmaskt
         ed    wtos+$i1(l'edmaskt),wa+5

         cvd   r0,wa              * R0 = rsn
         ed    wtos+$i2(l'edmaskt),wa+5
         wto   mf=(E,wtos)        * Message 1

         b     done
*
*  ANTRQST Query     Error
*
antrq_qryerr   equ  *
         cvd   r15,wa             * R15 = rc
         mvc   wtos(msg2ln),msg2
         mvc   wtos+$i1(l'edmaskt),edmaskt
         mvc   wtos+$i2(l'edmaskt),edmaskt
         ed    wtos+$i1(l'edmaskt),wa+5

         cvd   r0,wa              * R0 = rsn
         ed    wtos+$i2(l'edmaskt),wa+5
         wto   mf=(E,wtos)        * Message 2

         b     done
*
*  ANTRQST Other     Error
*
antrq_error    equ  *
         c     r15,sdmerr         * SDM error 7240?
         bne   antrq_qryerr       * Else other error

         icm   r9,b'1111',antmsgl
         srl   r9,24
         ltr   r9,r9              * R9 = message length
         bz    done

         bctr  r9,0
         mvc   wtos(msgaln),wtoant
         la    r8,wtos+$i3
         ex    r9,mvcant          * mvc 0(*-*,r8),antmsg
         wto   mf=(E,wtos)

         b     done
*
*   Constants
*
         ds    0d
qryok    dc    al4(RQST_PQUERY_QRYSIZE_BIG_ENOUGH)
sdmerr   dc    al4(RQST_PQUERY_ERROR)

packit   pack  devc(3),parms(*-*)
mvcant   mvc   0(*-*,r8),antmsg
edmaskt  dc    x'402020202120'

error    dc    c'ERROR'
suspend  dc    c'SUSPEND'

$i1      equ   28
$i2      equ   39
$i3      equ   8
$i4      equ   4
*                     1111111111222222222223333333334444444444555555555
*               4567890123456789012345678901234567890123456789012345678
msg1     wto   'ANTRQST  Parm error: RC=012345 RSN=012345',            *
               routcde=11,mf=L
msg1ln   equ   *-msg1
msg2     wto   'ANTRQST Query error: RC=012345 RSN=012345',            *
               routcde=11,mf=L
msg2ln   equ   *-msg2
wtoant   wto   'ANT0                                                   *
                                                                     ',*
               routcde=11,mf=L
msgaln   equ   *-wtoant
badpmsg  wto   'RXSIQRY Bad parameter',                                *
               routcde=11,mf=L

         ds    0d
trtab    dc    xl256'00'
         org   trtab+x'81'
         dc    x'fafbfcfdfeff'
         org   trtab+c'A'
         dc    x'fafbfcfdfeff'
         org   trtab+c'0'
         dc    c'0123456789'
         org
         eject
         ds    0d
         ltorg
*
*  ANTRQST Workarea and Parameter List
*
antrqd   dsect
savearea ds    18f
forward  equ   8
backward equ   4

wa       ds    d
parms    ds    cl4
devc     ds    xl2
         ds    xl2

rtncd    ds    f
rsncd    ds    f
qrylen   ds    h
         ds    0f
qretinfo ds    cl100
         org   qretinfo
rtc      ds    f
rsn      ds    f
antmsgl  ds    xl1
antmsg   ds    0x
         org   qretinfo+l'qretinfo

         antrqstl name=antqpl,base=0D
qryinfo  ds    cl512
         ds    0d
wtos     ds    xl128
$antrqdln  equ *-antrqd
*
*  REXX Interfaces
*
         irxefpl
         irxevalb
         irxargtb
         yregs
         end
