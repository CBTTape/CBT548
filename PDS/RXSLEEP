RXSLEEP  title 'REXX function to wait for a specified time'
*--------------------------------------------------------------------*
* Program Name  : RXSLEEP
*
* Language      : Assembler
* LinkEdit Attr : RENT REUS REFR AC(0)
* AMODE         : 31
* RMODE         : ANY
*
*--------------------------------------------------------------------*
* Program Function
*
* External REXX function to wait for a specified time.
*
* The program will wait for a specified amount of seconds. The number
* of seconds to wait for is passed as a parameter to the function
* by the invoking REXX Exec. If no parameter is passed, a default of
* 10 seconds is used. The maximum is 999 seconds.
* Contrary to popular belief, an attention exit cannot be used
* to interrupt the wait. The exit gains control after the wait
* has expired. It is possible to do something with multiple tasks
* but that is much too complicated.
*
* Syntax
*
* rcode = sleep(secs)
*
* Keywords
*
* RCODE   The return code from sleep  :  0  Success
*                                     : -1  Parameter error
* SECS    The number of seconds to wait for (1 - 999)
*
* Problems:
*  Contact Alfred Nykolyn  apn@istar.ca
*
*--------------------------------------------------------------------*
$default equ    10*100                default wait time
rxsleep  csect
rxsleep  amode 31
rxsleep  rmode any
         save  (14,12)
         lr    r12,r15
         using rxsleep,r12

         lr    r2,r1
         using efpl,r2                addr REXX func parms

         la    r0,$worklen
         getmain RU,lv=(0),loc=ANY

         st    r1,forward(,r13)
         st    r13,backward(,r1)
         lr    r13,r1
         using workarea,r13

         la    r0,$default            Set default wait time
         st    r0,interval
         l     r3,efpleval            addr of pointer to eval block
         l     r3,0(,r3)              REXX eval block addr
         using evalblock,r3

         l     r4,efplarg             REXX arg list
         using argtable_entry,r4      address arg table

         icm   r5,b'1111',argtable_argstring_ptr
         bnp   waitfor                any args?

         icm   r6,b'1111',argtable_argstring_length
         bnp   waitfor                If no parm, use default

         la    r15,3
         cr    r6,r15                 Larger than 999 seconds?
         bh    parmerr                Yes - error

         bctr  r6,0
         mvc   packtime,zeros
         ex    r6,valmvn              mvn packtime(*-*),0(r5)
         ex    r6,valclc              clc packtime(*-*),0(r5)
         bne   parmerr                Non-numeric argument

         ex    r6,pack                pack packtime,0(*-*,r5)
         la    r0,100
         cvb   r9,packtime

         mr    r8,r0                  x 100 for BINTVL
         st    r9,interval            and store for STIMERM
         drop  r2,r4

waitfor  equ   *
         la    r9,interval
         stimerm SET,wait=YES,        Wait for the specified time      +
               bintvl=(r9),                                            +
               id=(r9),               A convenient constant            +
               mf=(E,stimerml)

         la    r0,1
         st    r0,evalblock_evlen     Return 0 (REXX function!!)
         mvi   evalblock_evdata,c'0'

done     equ   *
         lr    r11,r13
         l     r13,backward(,r13)     R13 -> old savearea
         la    r0,$worklen
         freemain RU,lv=(0),a=(r11)

         return (14,12),rc=0

parmerr  equ   *
         la    r0,2
         st    r0,evalblock_evlen
         mvc   evalblock_evdata(2),=c'-1'
         b     done
*
*-------------------------------------------------------------------*
* Execlted Instructions                                             *
*-------------------------------------------------------------------*
         ds    0d
valmvn   mvn   packtime(*-*),0(r5)
valclc   clc   packtime(*-*),0(r5)
pack     pack  packtime,0(*-*,r5)
*
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs                                   *
*-------------------------------------------------------------------*
         ds    0d
zeros    dc    cl8'00000000'

         ltorg

workarea dsect
savearea ds    18f                    Savearea
forward  equ   8
backward equ   4

packtime ds    d
interval ds    f                      Time interval

stimerml stimerm SET,mf=L
$worklen equ   *-workarea

         irxefpl                      REXX mapping macros
         irxevalb
         irxargtb

         yregs
         END
